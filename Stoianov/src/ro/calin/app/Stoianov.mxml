<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" 
			   applicationComplete="application1_applicationCompleteHandler(event)" 
			   xmlns:view="ro.calin.view.*" initialize="application1_initializeHandler(event)" resize="application1_resizeHandler(event)">
	
	<s:states>
		<s:State name="slideshow"/>
		<s:State name="inapp"/>
	</s:states>
	
	<s:transitions>
		<s:Transition id="trans1" fromState="slideshow" toState="inapp">
			<s:Sequence>
				<s:Move target="{viewer}" duration="800" easer="{powerEasing}" yTo="540"/>
				<s:Parallel>
					<s:Move target="{viewer}" duration="800" easer="{powerEasing}"/>
					<s:Move target="{menu}" duration="800" easer="{powerEasing}"/>
					<s:Move target="{slider}" duration="800" easer="{powerEasing}" 
							effectEnd="move1_effectEndHandler(event)" effectStart="move1_effectStartHandler(event)"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition id="trans2" fromState="inapp" toState="slideshow">
			<s:Sequence>
				<s:Parallel>
					<s:Move target="{viewer}" duration="800" easer="{powerEasing}" yTo="540"/>
					<s:Move target="{menu}" duration="800" easer="{powerEasing}"/>
					<s:Move target="{slider}" duration="800" easer="{powerEasing}" 
							effectEnd="move1_effectEndHandler(event)" effectStart="move1_effectStartHandler(event)"/>
				</s:Parallel>
				<s:Move target="{viewer}" duration="800" easer="{powerEasing}"/>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
	<fx:Declarations>
		<s:Power id="powerEasing" exponent="6"/>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="srv" url="cfg/config.xml" result="resultHandler(event)"
						fault="faultHandler(event)"/>
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import ro.calin.controller.CSlideShower;
			import ro.calin.event.MenuEvent;
			import ro.calin.model.MSlideShower;
			
			import spark.effects.easing.Power;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var products:ArrayCollection;
			
			private function resultHandler(event:ResultEvent):void
			{
				trace(event.result.config.slideshow.pics);
				
				//must use "for each in" to iterate over collections
				//"for in" is used just for arrays or object props
				for each(var itm in event.result.config.menu.item) {
					trace(itm.name);
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultDetail, "Error");
			}
			
			

			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				//Alert.show("Complete app");
				//srv.send();
				
				viewer.y = screen.height;
			}
			
			private var slModel:MSlideShower = new MSlideShower("data", "1.jpg|2.jpg|3.jpg|4.jpg|5.jpg", "|", true, 2000);
			var slController:CSlideShower = new CSlideShower(slModel);

			protected function application1_initializeHandler(event:FlexEvent):void
			{
				addEventListener(MenuEvent.MENU_ITEM_CLICK, function(event:MenuEvent):void {
					if(currentState == "slideshow") {
						slController.pause();
						currentState = "inapp";
					}
				});
				
				addEventListener(MenuEvent.MENU_LABEL_CLICK, function(event:MenuEvent):void {
					if(currentState == "inapp") {
						currentState = "slideshow";
						slController.resume();
					}
				});
			}


			protected function move1_effectEndHandler(event:EffectEvent):void
			{
				if(currentState == "inapp") {
					slider.visible = false;
				}
			}

			protected function move1_effectStartHandler(event:EffectEvent):void
			{
				if(currentState == "slideshow") {
					slider.visible = true;
				}
			}


			protected function application1_resizeHandler(event:ResizeEvent):void
			{
				//Alert.show(screen.height.toString() + ", " + screen.width.toString());
			}

			private var imgs:ArrayCollection = new ArrayCollection(
				new Array(
					{url:"data/1.jpg", desc:"This is the first pic"}, 
					{url:"data/2.jpg", desc:"This is the second pic"},
					{url:"data/3.jpg", desc:"This is the third pic"},
					{url:"data/4.jpg", desc:"This is the fourth pic"},
					{url:"data/5.jpg", desc:"This is the fifth pic"}
				)
			);

		]]>
	</fx:Script>
	
	<!--stop updating the model when this is hidden-->
	<view:SlideShower id="slider" y.slideshow="0" y.inapp="{-slider.height}" model="{slModel}" controller="{slController}" 
					  width="100%" height="100%" backgroundColor="gray">
	</view:SlideShower>
	
	<view:Menu id="menu" width="100%" height="40" y.slideshow="500" y.inapp="0"
			 color="white" backgroundColor="black">
		<view:menuEntries>
			<s:ArrayCollection>
				<fx:String>portofolio</fx:String>
				<fx:String>contact</fx:String>
				<fx:String>info</fx:String>
				<fx:String>links</fx:String>
			</s:ArrayCollection>
		</view:menuEntries>
	</view:Menu>
	
	<view:PictureViewer id="viewer" width="100%" height="100%" backgroundColor="gray"
						x="0" y.inapp="40" images="{imgs}">
	</view:PictureViewer>
</s:Application>
