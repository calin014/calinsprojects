<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" 
			   applicationComplete="application1_applicationCompleteHandler(event)" 
			   xmlns:view="ro.calin.view.*" >
	
	<s:states>
		<s:State name="slideshow"/>
		<s:State name="inapp"/>
	</s:states>
	
	<s:transitions>
		<s:Transition id="trans">
			<s:Parallel>
				<s:Move target="{menu}" duration="800" yTo="0" easer="{powerEasing}"/>
				<s:Move target="{slider}" duration="800" yTo="{-slider.height}" easer="{powerEasing}"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import ro.calin.controller.CSlideShower;
			import ro.calin.model.MSlideShower;
			
			import spark.effects.easing.Power;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var products:ArrayCollection;
			
			private function resultHandler(event:ResultEvent):void
			{
				trace(event.result.config.slideshow.pics);
				
				//must use "for each in" to iterate over collections
				//"for in" is used just for arrays or object props
				for each(var itm in event.result.config.menu.item) {
					trace(itm.name);
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultDetail, "Error");
			}
			
			

			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				//Alert.show("Complete app");
				//srv.send();
			}
			
			private var slModel:MSlideShower = new MSlideShower("data", "1.jpg|2.jpg|3.jpg|4.jpg|5.jpg", "|", true, 1500);
			var slController:CSlideShower = new CSlideShower(slModel);

			protected function viewChangedHandler(event:IndexChangeEvent):void
			{
				trace(event);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Power id="powerEasing" exponent="6"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="srv" url="cfg/config.xml" result="resultHandler(event)"
						fault="faultHandler(event)"/>
	</fx:Declarations>
	
	<!--stop updating the model when this is hidden-->
	<view:SlideShower id="slider" y.slideshow="0" y.inapp="{-slider.height}" model="{slModel}" controller="{slController}" width="100%" height="100%" backgroundColor="red">
	</view:SlideShower>
	
	<mx:HBox id="menu" width="100%" height="40" y.slideshow="500"
			 color="white" backgroundColor="black">
		<s:Label text="Numele meu" fontFamily="Comic Sans MS" fontSize="24" paddingRight="200"/>
		<s:DataGroup>
			<s:layout>
				<s:HorizontalLayout gap="10" />
			</s:layout>
			<s:dataProvider>
				<s:ArrayCollection>
					<fx:String>portofolio</fx:String>
					<fx:String>contact</fx:String>
					<fx:String>info</fx:String>
					<fx:String>links</fx:String>
				</s:ArrayCollection>
			</s:dataProvider>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<fx:Script>
							<![CDATA[
								import mx.controls.Alert;
								import mx.core.FlexGlobals;
								
								import spark.components.Application;
								override public function set data(value:Object):void {
									super.data = value;
									
									if (data == null) // a renderer's data is set to null when it goes out of view
										return;
									
									link.label = value as String;
								}
								public function onClickHandler(event:MouseEvent) {
									//externalize this component and use events to transmit clicks
									if((FlexGlobals.topLevelApplication as Application).currentState == "slideshow") {
										(FlexGlobals.topLevelApplication as Application).currentState  = "inapp";
									}
								}
							]]>
						</fx:Script>
						<s:Button id="link" skinClass="ro.calin.skin.LinkButtonSkin" click="onClickHandler(event);"/>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:DataGroup>
	</mx:HBox>
</s:Application>
