<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="init(event)">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:states>
		<s:State name="default"/>
		<s:State name="flipped"/>
	</s:states>
	<s:transitions>
		<s:Transition>
			<s:CrossFade id="xFade" target="{holder}" duration="700" />
		</s:Transition>
	</s:transitions>
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import ro.calin.controller.CSlideShower;
			import ro.calin.model.MSlideShower;
			
			import spark.components.Application;
			
			[Bindable] public var model:MSlideShower;
			[Bindable] public var controller:CSlideShower;

			protected function init(event:FlexEvent):void
			{
				ChangeWatcher.watch(model, "image", img_completeHandler);
				//img.source = model.image;
			}

			protected function img_completeHandler(event:Event):void
			{
				var ldr:Loader = new Loader();
				
				ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event):void{
					var loaderInfo:LoaderInfo = LoaderInfo(e.target);
					
					var w:Number = screen.width;
					var h:Number = screen.height;
					
					var dh:Number = Math.abs(h - loaderInfo.height);
					var dw:Number = Math.abs(w - loaderInfo.width);

					var scale:Number;
					if(dh < dw) {
						scale = h / loaderInfo.height;
					} else {
						scale = w / loaderInfo.width;
					}
					//width or height could be smaller
					var bitmapData:BitmapData = new BitmapData(w, h, false, 0xFFFFFF);
					
					var m:Matrix = new Matrix();
					m.scale(scale, scale);
					//m.translate();
					bitmapData.draw(loaderInfo.loader, m);
					trace(scale, bitmapData.width, bitmapData.height);

					if(currentState == "default") {
						img2.source = bitmapData;
						currentState = "flipped";
					} else {
						img1.source = bitmapData;
						currentState = "default";
					}
				});
				
				ldr.load(new URLRequest(encodeURI(model.image)));
			}

		]]>
	</fx:Script>

	<s:Group id="holder">
		<s:BitmapImage id="img1" visible="true" visible.flipped="false" smooth="true"/>
		<s:BitmapImage id="img2" visible="false" visible.flipped="true" smooth="true"/>
	</s:Group>
</s:Group>
