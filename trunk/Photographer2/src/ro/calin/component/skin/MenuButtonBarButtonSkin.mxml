<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the middle buttons in a Spark ButtonBar component.  

       @see spark.components.ButtonBar
       @see spark.components.ButtonBarButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="200" minHeight="21"
      alpha.disabledStates="0.5">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
            /** 
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
       /** 
        * @private
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
    </fx:Script>
	
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
	
	<s:transitions>
		<s:Transition toState="*" autoReverse="true">
			<s:Move target="{overFill}" duration="200"/>
		</s:Transition>
		
	</s:transitions>
	
    <s:Rect right="0" width="0.5" top="0" bottom="0">
        <s:fill>
            <s:SolidColor color="gray" alpha="0.5"/>
        </s:fill>
    </s:Rect>
    
    <s:Rect y="{hostComponent.height - 1}" y.overStates="0" id="overFill" 
			width="100%" height="100%" visible="false" visible.overStates="true">
        <s:fill>
			<s:SolidColor color="green"/>
        </s:fill>
    </s:Rect>
    
    <!-- layer 8: text -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" fontSize="30" color="white"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkSkin>
